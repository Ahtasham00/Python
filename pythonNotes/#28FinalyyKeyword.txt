//isAww
==============
Finaly Keyword
==============

## It is part of excpetion handling
## It is only block of code that excute ever

Example:
try:
 num=int(input("Enter number"))
except:
 print("Error Occured")
finally:
 print("This will ever excute")  //This will excute ever

Now if finally ever print than instead of using finaly we can simply write code out of scope
from try it will also excute like :
try:
 num=int(input("Enter number"))
except:
 print("Error Occured")
print("This will ever excute")   //as it is out of scope from try it will always excute

But the difference will be visible when we use it in function
def fun():
 try:
  num=int(input("Enter number"))
  return 1:
 except:
  return 0: 
  print("Error Occured")
 finally:
  print("This will ever excute")    Although return 1 or 0 excute 
                                    in every case But also finaly excute in every case
  #######But######
 def fun():
 try:
  num=int(input("Enter number"))
  return 1:
 except:
  return 0: 
  print("Error Occured")
 print("This will ever excute")       But this print will not excute due to retun statement



